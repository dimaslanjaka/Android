import java.nio.file.Files
import java.nio.file.StandardCopyOption

/*
 * This file was generated by the Gradle "init" task.
 */

plugins {
    // Java support
    id("java")
    // Kotlin support
    id("org.jetbrains.kotlin.jvm") //version "1.4.32"
    id("org.jetbrains.kotlin.plugin.allopen") version "1.4.32"
    // Application
    id("application")
    id("org.openjfx.javafxplugin") version "0.0.8"
}

repositories {
    /*
    flatDir {
        dirs "${rootProject.rootDir}/plugin/build/libs/"
    }
     */
    mavenLocal()
    mavenCentral()
    jcenter()
    google()
    gradlePluginPortal()
    maven { url = "https://repo.maven.apache.org/maven2" }
    maven { url = "https://maven.aliyun.com/nexus/content/repositories/jcenter/" }
    maven { url = "https://maven.aliyun.com/nexus/content/groups/public/" }
    maven { url = "https://plugins.gradle.org/m2/" }
    maven { url = 'https://jitpack.io' }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}
configurations.maybeCreate("jooqRuntime")
dependencies {
    // Local
    api(fileTree("libs") { include("*.jar") })
    //api(gradleApi())
    //api(localGroovy())
    implementation(project(":library"))
    implementation(project(":selenium-java"))

    // Test
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.6.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testCompileOnly("junit:junit:4.13.2")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine")

    // Kotlin
    implementation("org.jetbrains.kotlin:kotlin-reflect:1.4.32")
    implementation("org.jetbrains.kotlin:kotlin-stdlib:1.4.32")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.4.32")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.4.32")
    api("org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.32")

    // JSON
    implementation("com.fasterxml.jackson.core:jackson-databind:2.12.1")
    implementation("com.google.code.gson:gson:2.8.6")

    // JavaFX Framework
    implementation("com.jfoenix:jfoenix:8.0.10")
    implementation("no.tornado:tornadofx:1.7.19")

    // Others
    implementation("com.pushtorefresh.storio3:content-resolver:3.0.0")

    // html parser
    implementation "org.jsoup:jsoup:1.13.1"

    // Time Unit
    implementation "joda-time:joda-time:2.10.9"

    // Git
    implementation "org.eclipse.jgit:org.eclipse.jgit:5.11.0.202103091610-r"

    // Javax family
    implementation("javax.xml.bind:jaxb-api:2.4.0-b180830.0359")
    implementation("javax.activation:activation:1.1.1")

    // Apache
    implementation("org.apache.httpcomponents:httpclient:4.5.13")
    implementation("org.apache.commons:commons-collections4:4.4")
    implementation("org.apache.commons:commons-lang3:3.12.0")
    implementation("org.apache.commons:commons-compress:1.20")
    implementation("org.apache.commons:commons-exec:1.3")
    implementation("org.apache.commons:commons-math3:3.6.1")
    implementation("commons-codec:commons-codec:20041127.091804")
    implementation("commons-net:commons-net:20030805.205232")
    implementation("commons-validator:commons-validator:1.7")
    implementation("commons-io:commons-io:20030203.000550")
    implementation("commons-cli:commons-cli:20040117.000000")
    implementation("xerces:xercesImpl:2.12.1")
    implementation("org.apache.cxf:cxf-common-utilities:2.5.11")
}

task fatJar(type: Jar) {
    manifest.from jar.manifest
    classifier = 'all'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

/*
fileTree("../plugin/build/libs").each {
    if (it.name.startsWith("gradle-plugin")) {
        java.nio.file.Path to = new File("$project.projectDir/libs/").getAbsoluteFile().toPath()
        java.nio.file.Path from = it.getAbsoluteFile().toPath()
        try {
            Files.copy(from, to.resolve(from.getFileName()), StandardCopyOption.REPLACE_EXISTING, StandardCopyOption.COPY_ATTRIBUTES)
        } catch (IOException ignored) {
        }
    }
}
*/

// compiler configuration
compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
}
compileTestKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
}
java {
    withJavadocJar()
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

javafx {
    // Points to JDK and its JavaFX libraries, also declares target runtime JDK
//    javaRuntime = "/Library/Java/JavaVirtualMachines/jdk1.7.0_40.jdk"
    version = "13" // Specify javafx sdk version
    modules = ["javafx.controls", "javafx.fxml", "javafx.swing", "javafx.media", "javafx.graphics", "javafx.web"]
    sdk = System.getenv("JAVAFX_HOME") // path javafx sdk
    if (sdk == null || sdk.isBlank()) {
        File findsdk = new File("D:\\bin\\javafx-sdk-11.0.2");
       if (!findsdk.exists()) {
           throw new InvalidUserDataException("JAVAFX_HOME environment variable is not set. It must be set to root folder where JAVAFX SDK is located")
       } else {
           sdk = findsdk.absolutePath
       }
    }
    String javafxLib = new File(sdk, 'lib').absolutePath
    println("Using JavaFX Lib ${javafxLib}")
    application {
        mainClassName = "sample.Main"
        applicationName = "L3n4r0x"
        applicationDefaultJvmArgs = [
                "--module-path=${javafxLib}",
                "--add-modules=javafx.controls,javafx.swing,javafx.media,javafx.graphics"]
        //println("applicationDefaultJvmArgs:" + applicationDefaultJvmArgs)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.test {
    //useJUnit()
    useJUnitPlatform {
        includeEngines("junit-vintage")
        // excludeEngines("junit-jupiter")
    }
    maxHeapSize = "1G"
}